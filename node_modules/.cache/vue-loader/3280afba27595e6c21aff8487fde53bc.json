{"remainingRequest":"/Users/macbookpro/dev/immunity/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/dev/immunity/src/components/MainPage.vue?vue&type=template&id=8268eaf2&","dependencies":[{"path":"/Users/macbookpro/dev/immunity/src/components/MainPage.vue","mtime":1627376088588},{"path":"/Users/macbookpro/dev/immunity/node_modules/cache-loader/dist/cjs.js","mtime":1627375335352},{"path":"/Users/macbookpro/dev/immunity/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1627375337924},{"path":"/Users/macbookpro/dev/immunity/node_modules/cache-loader/dist/cjs.js","mtime":1627375335352},{"path":"/Users/macbookpro/dev/immunity/node_modules/vue-loader/lib/index.js","mtime":1627375337923}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}