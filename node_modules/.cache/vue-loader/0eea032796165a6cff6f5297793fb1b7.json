{"remainingRequest":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cosmjn/Desktop/imunity tea/imuni-tea/src/components/modal.vue?vue&type=template&id=0eaeaf66&","dependencies":[{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/src/components/modal.vue","mtime":1607001816780},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}