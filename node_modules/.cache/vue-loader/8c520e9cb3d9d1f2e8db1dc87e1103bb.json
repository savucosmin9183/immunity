{"remainingRequest":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cosmjn/Desktop/imunity tea/imuni-tea/src/components/MainPage.vue?vue&type=template&id=109177d0&","dependencies":[{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/src/components/MainPage.vue","mtime":1606912828850},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cosmjn/Desktop/imunity tea/imuni-tea/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS4kcmVzaXplICYmIF92bS4kbXEuYWJvdmUoOTkyKQogICAgPyBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWFpbi1wYWdlIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJmaXJzdF9wYWdlIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWlzdHMiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9taXN0X2JnLnBuZyIpLCBhbHQ6ICJtaXN0cyIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInZpc3VhbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3Zpc3VhbC5wbmciKSwgYWx0OiAidmlzdWFsIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWlzdHNfZnJvbnQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9taXN0X2Zyb250LnBuZyIpLCBhbHQ6ICJtaXN0cyIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJOYXZiYXIiKSwKICAgICAgICAgICAgICBfdm0uX20oMCkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgIF9jKCJGb290ZXIiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAibW9kYWwiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG5hbWU6ICJvcmRlcl9tb2RhbCIgfSB9LAogICAgICAgICAgICBbX2MoIk1vZGFsQ29tcG9uZW50IildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIDogX2MoImRpdiIsIFtfdm0uX20oNSldKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlcm8iIH0sIFsKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibWFpbl90aXRsZSIgfSwgWwogICAgICAgIF9jKCJiIiwgW192bS5fdigiU8SDbsSDdGF0ZWEgdGEiKV0pLAogICAgICAgIF92bS5fdigiIGVzdGUiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYiIsIFtfdm0uX3YoInBhc2l1bmUgbWVhISIpXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmlyc3RfcGFnZV9idXR0b24iIH0sIFsKICAgICAgICBfYygicCIsIFtfdm0uX3YoIkFmbMSDIG1haSBtdWx0ZSIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInNlY29uZF9wYWdlIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJsZWF2ZXMiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvbGVhdmVzLnBuZyIpLCBhbHQ6ICJsZWF2ZXMiIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5ncmVkaWVudGUiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbmdyZWRpZW50ZS5wbmciKSwKICAgICAgICAgICAgYWx0OiAiaW5ncmVkaWVudGUiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicmVjb21hbmRhcmUiIH0sIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9zb25pYS5wbmciKSwgYWx0OiAic29uaWEiIH0KICAgICAgICB9KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY29uZF9jb2x1bW4iIH0sIFsKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiUkVDT01BTkRBVCBERSBOVVRSSciaSU9OSVNUIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFyYWdyYXBocyIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBhcmFncmFwaCIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAi4oCcU0FOQVRBVEVBIFRBIEVTVEUgUEFTSVVORUEgTUVBIeKAnSBzdWIgYWNlYXN0YSBwcmVtaXphIGFtIGluY2VwdXQgdG90dWwsIGFkaWNhIGRpbiBwYXNpdW5lIHBlbnRydSBtZWRpY2luYSwgcGVudHJ1IHRvdCBjZWVhIGNlIGluc2VhbW5hIHVuIHN0aWwgZGUgdmlhdGEgc2FuYXRvcyBzaSBlY2hpbGlicmF0IC4gIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgTW9kdWwgaW4gY2FyZSBldSBjb25jZXAgZGlldGVsZSBwZW50cnUgcGFjaWVudGlpIG1laSBlc3RlIHVuIGNvbmNlcHQgdW5pYyBpbiBSb21hbmlhICwgYWJvcmRleiBmaWVjYXJlIHBhY2llbnQgZGluIHRvYXRlIHB1bmN0ZWxlIGRlIHZlZGVyZSAsIHNjb3B1bCBtZXUgZXN0ZSBzYSBpaSBzY2hpbWIgdmlhdGEgLCBpbiBiaW5lIGV2aWRlbnQgc2kgbnUgZG9hciBhc3BlY3R1bCBmaXppYyAuICIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIEFzYSBjdW0gaW1pIHBsYWNlIG1pZSBzYSBzcHVuICwgc3VudGVtIG8gZmFtaWxpZSAsIGZhbWlsaWEgU29uU2xpbS4gTGEgaW5jZXB1dCBudSBzdGlhbSBjYXQgZGUgbWFyZSBhcmUgc2EgZGV2aW5hIGFjZWFzdGEgZmFtaWxpZSAsIGRhciBhemkgLCBmYW1pbGlhIFNvblNsaW0gc2UgaW50aW5kZSBwZSB0b2F0ZSBjb250aW5lbnRlbGUgbHVtaWkgc2kgZGUgbGEgbyB6aSBsYSBhbHRhIG1pIHNlIGNvbmZpcm1hIGNhIGFjZWFzdGEgZXN0ZSBtZW5pcmVhIG1lYSAsIHBlbnRydSBhc3RhIG0tYSBsYXNhdCBEdW1uZXpldSBwZSBwYW1hbnQuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBhcmFncmFwaCIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiTWEgc2ltdCBpbXBsaW5pdGEgY2FuZCBkYXRvcml0YSBtdW5jaWkgbWVsZSBvYW1lbmlpIHN1bnQgZmVyaWNpdGkgc2kgdG9jbWFpIHBlbnRydSBjYSBpbWkgZG9yZXNjIGNhIHNpIGNlaSBjYXJlIG51IGltaSBzdW50IHBhY2llbnRpICwgc2Egc2UgYnVjdXJlIGRlIHVuIHN0aWwgZGUgdmlhdGEgbWFpIHNhbmF0b3MgLCBhbSBjcmVhdCwgdG90IGRpbiBwYXNpdW5lLCBwZW50cnUgc2VtZW5paSBtZWkgLCBhY2VzdCBwYWNoZXQgLCBJTU1VTklUWSBieSBTb25TbGltICwgY2FyZSB2YSBlc3RlIHVuIGFsaWF0IGluIHN1c3RpbmVyZWEgc2lzdGVtdWx1aSBpbXVuaXRhci4gIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgQWNlc3QgY29uY2VwdCByZXNwZWN0YSBpbiBjb250aW51YXJlYSBwcmluY2lwaWlsZSBtZWxlICwgcmVzcGVjdGl2IHRvdHVsIG5hdHVyYWwgc2kgZGUgY2FsaXRhdGUgcHJlbWl1bSAuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNpZ25hdHVyZSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3NvbmlhYnVydGljLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJzaWduYXR1cmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInRoaXJkX3BhZ2UiIH0sIFsKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJQYWNoZXR1bCAiKSwKICAgICAgICBfYygiYiIsIFtfdm0uX3YoIklNTVVOSVRZIGJ5IFNvblNsaW0iKV0pLAogICAgICAgIF92bS5fdigiIGVzdGUgY29uY2VwdXQgcGVudHJ1ICIpLAogICAgICAgIF9jKCJiIiwgW192bS5fdigiMzAgZGUgemlsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgc2kgdmV0aSByZWdhc2kgdXJtYXRvYXJlbGUgcHJvZHVzZToiKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0cyIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdCIgfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy90b25pYy5wbmciKSwgYWx0OiAidG9uaWMiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF90aXRsZSIgfSwgW192bS5fdigiSU1NVU5JVFkgVE9OSUMiKV0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0IiB9LCBbCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3Bvd2VyLnBuZyIpLCBhbHQ6ICJwb3dlciIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0X3RpdGxlIiB9LCBbX3ZtLl92KCJJTU1VTklUWSBQT1dFUiIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2R1Y3QiIH0sIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaGVscC5wbmciKSwgYWx0OiAiaGVscCIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0X3RpdGxlIiB9LCBbX3ZtLl92KCJJTU1VTklUWSBIRUxQIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdCIgfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9mb3J0ZS5wbmciKSwgYWx0OiAiZm9ydGUiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF90aXRsZSIgfSwgW192bS5fdigiSU1NVU5JVFkgRk9SVEUiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFjayIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2N1dGllLnBuZyIpLCBhbHQ6ICJjdXRpZSIgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFsKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImJvbGQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJJTU1VTklUWSIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJCWSBTT05TTElNIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIzOTkgUk9OIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tbWFuZF9idXR0b24iIH0sIFsKICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJDb21hbmTEgyBhY3VtIildKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVsZW1lbnRlIiB9LCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIisgSU1NVU5JVFkgVE9OSUMiKV0pLAogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIrIElNTVVOSVRZIFBPV0VSIildKSwKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiKyBJTU1VTklUWSBIRUxQIildKSwKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiKyBJTU1VTklUWSBGT1JURSIpXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAiZm91cnRoX3BhZ2UiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWFnZV9jZW50ZXJlZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1hZ2VfY29udGFpbmVyIiB9LCBbCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3lvZ2EucG5nIiksIGFsdDogInlvZ2EiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZWFjdXAiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3RlYV9sZWF2ZXMucG5nIiksIGFsdDogInRlYWN1cCIgfQogICAgICAgICAgfSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndoaXRlX3RleHQiIH0sIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk1vZHVsIGluIGNhcmUgZXUgY29uY2VwIGRpZXRlbGUgcGVudHJ1IHBhY2llbnRpaSBtZWkgZXN0ZSB1biBjb25jZXB0IHVuaWMgaW4gUm9tYW5pYSwgYWJvcmRleiBmaWVjYXJlIHBhY2llbnQgZGluIHRvYXRlIHB1bmN0ZWxlIGRlIHZlZGVyZSwgc2NvcHVsIG1ldSBlc3RlIHNhIGlpIHNjaGltYiB2aWF0YSwgaW4gYmluZSBldmlkZW50IHNpIG51IGRvYXIgYXNwZWN0dWwgdml6aWMuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImdoaWxpbWVsZSIsCiAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvZ2hpbGltZWxlLnBuZyIpLCBhbHQ6ICJnaGlsaW1lbGUiIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImNvbnRhY3RfcGFnZSIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAibWludGNvcHkiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvbWludGNvcHkucG5nIiksIGFsdDogIm1pbnRjb3B5IiB9CiAgICAgIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNlbnRlcl9lbGVtZW50IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWN0X3VzIiB9LCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIkNPTlRBQ1RFQVpBLU5FIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpcnN0X2xpbmUiIH0sIFsKICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hbWVfaW5wdXQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIk51bWUiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1haWxfaW5wdXQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImVtYWlsIiwgcGxhY2Vob2xkZXI6ICJFbWFpbCIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZXNhal9pbnB1dCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICJNZXNhaiIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZW5kbWVzc2FnZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiVHJpbWl0ZSBtZXNhanVsIildKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaXJzdF9wYWdlX21vYmlsZSIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAibG9nb19tb2JpbGUiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvbG9nby5wbmciKSwgYWx0OiAibG9nbyIgfQogICAgICB9KSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogIm1pc3RzIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL21pc3RfYmcucG5nIiksIGFsdDogIm1pc3RzIiB9CiAgICAgIH0pLAogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAibWlzdHNfZnJvbnQiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvbWlzdF9mcm9udC5wbmciKSwgYWx0OiAibWlzdHMiIH0KICAgICAgfSksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJ2aXN1YWxfbW9iaWxlIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3Zpc3VhbC5wbmciKSwgYWx0OiAidmlzdWFsIiB9CiAgICAgIH0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJtYWluX3RpdGxlX21vYmlsZSIgfSwgWwogICAgICAgIF9jKCJiIiwgW192bS5fdigiU8SDbsSDdGF0ZWEgdGEiKV0pLAogICAgICAgIF92bS5fdigiIGVzdGUiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfYygiYiIsIFtfdm0uX3YoInBhc2l1bmUgbWVhISIpXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmlyc3RfcGFnZV9idXR0b24gYnV0dG9uX21vYmlsZSIgfSwgWwogICAgICAgIF9jKCJwIiwgW192bS5fdigiQWZsxIMgbWFpIG11bHRlIildKQogICAgICBdKSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImxlYXZlc19tb2JpbGUiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvbGVhdmVzLnBuZyIpLCBhbHQ6ICJsZWF2ZXMiIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5ncmVkaWVudGVfbW9iaWxlIiwKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW5nLnBuZyIpLCBhbHQ6ICJpbmdyZWRpZW50ZSIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJyZWNvbWFuZGFyZV90aXRsdV9tb2JpbCIgfSwgWwogICAgICAgIF92bS5fdigiUkVDT01BTkRBVCBERSBOVVRSSciaSU9OSVNUIikKICAgICAgXSksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJzb25pYV9tb2JpbCIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9zb25pYS5wbmciKSwgYWx0OiAic29uaWEiIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFyYWdyYWZfbW9iaWwiIH0sIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk1hIHNpbXQgaW1wbGluaXRhIGNhbmQgZGF0b3JpdGEgbXVuY2lpIG1lbGUgb2FtZW5paSBzdW50IGZlcmljaXRpIHNpIHRvY21haSBwZW50cnUgY2EgaW1pIGRvcmVzYyBjYSBzaSBjZWkgY2FyZSBudSBpbWkgc3VudCBwYWNpZW50aSAsIHNhIHNlIGJ1Y3VyZSBkZSB1biBzdGlsIGRlIHZpYXRhIG1haSBzYW5hdG9zICwgYW0gY3JlYXQsIHRvdCBkaW4gcGFzaXVuZSwgcGVudHJ1IHNlbWVuaWkgbWVpICwgYWNlc3QgcGFjaGV0ICwgSU1NVU5JVFkgYnkgU29uU2xpbSAsIGNhcmUgdmEgZXN0ZSB1biBhbGlhdCBpbiBzdXN0aW5lcmVhIHNpc3RlbXVsdWkgaW11bml0YXIuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEFjZXN0IGNvbmNlcHQgcmVzcGVjdGEgaW4gY29udGludWFyZWEgcHJpbmNpcGlpbGUgbWVsZSAsIHJlc3BlY3RpdiB0b3R1bCBuYXR1cmFsIHNpIGRlIGNhbGl0YXRlIHByZW1pdW0gLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaWduYXR1cmVfbW9iaWwiLAogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9zb25pYWJ1cnRpYy5wbmciKSwgYWx0OiAic2lnbmF0dXJlIiB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdHNfbW9iaWxlIiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY3V0aWUtbW9iaWxlIiwKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvY3V0aWUucG5nIiksIGFsdDogImN1dGllIiB9CiAgICAgICAgfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcmljZV9tb2JpbGUiIH0sIFsKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImJvbGQiIH0sIFtfdm0uX3YoIklNTVVOSVRZIEJZIFNPTlNMSU0iKV0pLAogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIzOTkgUk9OIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tbWFuZF9idXR0b25fbW9iaWxlIiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiQ29tYW5kxIMgYWN1bSIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIlBhY2hldHVsICIpLAogICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJJTU1VTklUWSBieSBTb25TbGltIildKSwKICAgICAgICAgIF92bS5fdigiIGVzdGUgY29uY2VwdXQgcGVudHJ1ICIpLAogICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIzMCBkZSB6aWxlIildKSwKICAgICAgICAgIF92bS5fdigiIHNpIHZldGkgcmVnYXNpIHVybWF0b2FyZWxlIHByb2R1c2U6IikKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2R1Y3RzX21vYmlsZV9yb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF9tb2JpbGUiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInByb2R1Y3RfaW1hZ2VfbW9iaWxlIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3RvbmljLnBuZyIpLCBhbHQ6ICJ0b25pYyIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF90aXRsZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiSU1NVU5JVFkgVE9OSUMiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF9tb2JpbGUiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInByb2R1Y3RfaW1hZ2VfbW9iaWxlIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3Bvd2VyLnBuZyIpLCBhbHQ6ICJwb3dlciIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF90aXRsZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiSU1NVU5JVFkgUE9XRVIiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdHNfbW9iaWxlX3JvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0X21vYmlsZSIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZHVjdF9pbWFnZV9tb2JpbGUiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaGVscC5wbmciKSwgYWx0OiAiaGVscCIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVjdF90aXRsZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiSU1NVU5JVFkgSEVMUCIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0X21vYmlsZSIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZHVjdF9pbWFnZV9tb2JpbGUiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvZm9ydGUucG5nIiksIGFsdDogImZvcnRlIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwcm9kdWN0X3RpdGxlIiB9LCBbCiAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJJTU1VTklUWSBGT1JURSIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9kdXNlIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy5qcGciKSwgYWx0OiAicHJvZHVzZSIgfQogICAgICB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3aGl0ZV90ZXh0X21vYmlsZSIgfSwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTW9kdWwgaW4gY2FyZSBldSBjb25jZXAgZGlldGVsZSBwZW50cnUgcGFjaWVudGlpIG1laSBlc3RlIHVuIGNvbmNlcHQgdW5pYyBpbiBSb21hbmlhLCBhYm9yZGV6IGZpZWNhcmUgcGFjaWVudCBkaW4gdG9hdGUgcHVuY3RlbGUgZGUgdmVkZXJlLCBzY29wdWwgbWV1IGVzdGUgc2EgaWkgc2NoaW1iIHZpYXRhLCBpbiBiaW5lIGV2aWRlbnQgc2kgbnUgZG9hciBhc3BlY3R1bCB2aXppYy4gIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImdoaWxpbWVsZV9tb2JpbGUiLAogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9naGlsaW1lbGUucG5nIiksIGFsdDogImdoaWxpbWVsZSIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlcl9tb2JpbGUiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlcl9kaXYiIH0sIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibG9nb19tb2JpbGUiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2xvZ28ucG5nIiksIGFsdDogImxvZ28iIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiUGFjaGV0dWwgSU1NVU5JVFkgZXN0ZSBvIGNyZWF0aWUgaW5vdmF0b2FyZSwgY29tcHVzYSBkaW4gaW5ncmVkaWVudGUgbmF0dXJhbGUgc2kgaW5lZGl0ZSwgZGUgbyBjYWxpdGF0ZSBzdXBlcmlvYXJhLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY29uZF9lbGVtZW50IiB9LCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIlRlbDogMDc2MCAzODggNzYwIildKSwKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiRW1haWw6IHNvbi5zbGltQHlhaG9vLmNvbSIpXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNvY2lhbHMiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24iLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ZhY2Vib29rLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiZmFjZWJvb2sgaWNvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW5zdGFncmFtLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiaW5zdGFncmFtIGljb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}